import csv
import shutil
import os
# Open file
with open('Medical_Imaging/metadata.csv') as file_obj:
      
    # Skips the heading
    # Using next() method
    heading = next(file_obj)
      
    # Create reader object by passing the file 
    # object to reader method
    reader_obj = csv.reader(file_obj)
    listscv = []  
    diagnoses = []
    bodyplaces = []
    # Iterate over each row in the csv file 
    # using reader object
    for row in reader_obj:
        listscv.append(row)
    
 #   for row in reader_obj:
  #      listscv.append(row[])
sussylist = ['MEL', "AK", "SCC"]

def sussyPicSeperator(): #copyies cancerous pics to another folder

    for el in listscv:
        if el[17] == "AK" and el[24] in os.listdir(".\\Medical_Imaging\\Images"):
            shutil.copy(".\\Medical_Imaging\\Images\\" + el[24], ".\\Medical_Imaging\\sussyPics\\AK\\" + el[24])
        elif el[17] == "SCC" and el[24] in os.listdir(".\\Medical_Imaging\\Images"):
            shutil.copy(".\\Medical_Imaging\\Images\\" + el[24], ".\\Medical_Imaging\\sussyPics\\SCC\\" + el[24])
        elif el[17] == "MEL" and el[24] in os.listdir(".\\Medical_Imaging\\Images"):
            shutil.copy(".\\Medical_Imaging\\Images\\" + el[24], ".\\Medical_Imaging\\sussyPics\\MEL\\" + el[24])



    return print("LET'S GOOO!")


print(len(listscv))
agelist = []

diagnoselist = ['NEV', 'BCC', 'ACK', 'SEK', 'SCC', 'MEL']


def diagnosecount():
    diagnosecount = [0, 0, 0, 0, 0, 0]
    #[244, 845, 730, 235, 192, 52]
   # diagnosedict = {'NEV': 0, 'BCC': 0, 'ACK': 0, 'SEK': 0, 'SCC': 0, 'MEL': 0}
    for el in listscv:
        if el[17] == 'NEV':
            diagnosecount[0] += 1
        elif el[17] == 'BCC':
            diagnosecount[1] += 1
        elif el[17] == 'ACK':
            diagnosecount[2] += 1
        elif el[17] == 'SEK':
            diagnosecount[3] += 1
        elif el[17] == 'SCC':
            diagnosecount[4] += 1
        elif el[17] == 'MEL':
            diagnosecount[5] += 1

    diagonsedict = {'NEV': 0, 'BCC': 0, 'ACK': 0, 'SEK': 0, 'SCC': 0, 'MEL': 0}
    diagonsedict.update({'NEV': diagnosecount[0], 'BCC': diagnosecount[1], 'ACK': diagnosecount[2], 'SEK': diagnosecount[3], 'SCC': diagnosecount[4], 'MEL': diagnosecount[5]})
    return diagnosecount, diagonsedict

#I need to create a circular diagram plot of the diagnoses and their counts

def diagnoselist():
    for el in listscv:
        if el[14] not in bodyplaces:
            bodyplaces.append(el[14])
        agelist.append(el[6])
    return bodyplaces

#print(max(agelist), min(agelist))
#for i in listscv[17]:
 #   if i not in diagnoses:
 #       diagnoses.append(i)
print(diagnoselist())
print(diagnoses)
print(diagnosecount())
#sussyPicSeperator()
x = 0
dalist = []
for age in agelist:
    age = int(age)
    if age > 16 and age < 30:
        x += 1
        dalist.append(age)
print(x, dalist)
"""
import matplotlib.pyplot as plt

diagnoses = ['NEV', 'BCC', 'ACK', 'SEK', 'SCC', 'MEL']
counts = diagnosecount()

def make_autopct(values):
    def my_autopct(pct):
        total = sum(values)
        val = int(round(pct*total/100.0))
        return '{v:d}'.format(v=val)
    return my_autopct

fig1, ax1 = plt.subplots()
ax1.pie(counts, labels=diagnoses, autopct=make_autopct(counts), startangle=90)
ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.

plt.show()
"""