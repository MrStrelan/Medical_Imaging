import csv
import shutil
import os
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import matplotlib.colors as mcolors
import ast

def readerCSV():
    # Open file
    with open('metadata.csv') as file_obj:
        
        # Skips the heading
        # Using next() method
        heading = next(file_obj)
        
        # Create reader object by passing the file 
        # object to reader method
        reader_obj = csv.reader(file_obj)
        listscv = []  
        diagnoses = []
        bodyplaces = []
        # Iterate over each row in the csv file 
        # using reader object
        for row in reader_obj:
            listscv.append(row)
        
    #   for row in reader_obj:
    #      listscv.append(row[])
    sussylist = ['MEL', "AK", "SCC"]
    return

def sussyPicSeperator(): #copyies cancerous pics to another folder

    for el in listscv:
        if el[17] == "AK" and el[24] in os.listdir(".\\Medical_Imaging\\Images"):
            shutil.copy(".\\Medical_Imaging\\Images\\" + el[24], ".\\Medical_Imaging\\sussyPics\\AK\\" + el[24])
        elif el[17] == "SCC" and el[24] in os.listdir(".\\Medical_Imaging\\Images"):
            shutil.copy(".\\Medical_Imaging\\Images\\" + el[24], ".\\Medical_Imaging\\sussyPics\\SCC\\" + el[24])
        elif el[17] == "MEL" and el[24] in os.listdir(".\\Medical_Imaging\\Images"):
            shutil.copy(".\\Medical_Imaging\\Images\\" + el[24], ".\\Medical_Imaging\\sussyPics\\MEL\\" + el[24])



    return print("LET'S GOOO!")


#print(len(listscv))
agelist = []

diagnoselist = ['NEV', 'BCC', 'ACK', 'SEK', 'SCC', 'MEL']


def diagnosecount():
    diagnosecount = [0, 0, 0, 0, 0, 0]
    #[244, 845, 730, 235, 192, 52]
   # diagnosedict = {'NEV': 0, 'BCC': 0, 'ACK': 0, 'SEK': 0, 'SCC': 0, 'MEL': 0}
    for el in listscv:
        if el[17] == 'NEV':
            diagnosecount[0] += 1
        elif el[17] == 'BCC':
            diagnosecount[1] += 1
        elif el[17] == 'ACK':
            diagnosecount[2] += 1
        elif el[17] == 'SEK':
            diagnosecount[3] += 1
        elif el[17] == 'SCC':
            diagnosecount[4] += 1
        elif el[17] == 'MEL':
            diagnosecount[5] += 1

    diagonsedict = {'NEV': 0, 'BCC': 0, 'ACK': 0, 'SEK': 0, 'SCC': 0, 'MEL': 0}
    diagonsedict.update({'NEV': diagnosecount[0], 'BCC': diagnosecount[1], 'ACK': diagnosecount[2], 'SEK': diagnosecount[3], 'SCC': diagnosecount[4], 'MEL': diagnosecount[5]})
    return diagnosecount, diagonsedict

#I need to create a circular diagram plot of the diagnoses and their counts

def diagnoselist():
    for el in listscv:
        if el[14] not in bodyplaces:
            bodyplaces.append(el[14])
        agelist.append(el[6])
    return bodyplaces



#read extracted csv file
with open('dataExtracted.csv', 'r') as r:
    reader_obj = csv.reader(r)
    listscv = []  
    for row in reader_obj:
        listscv.append(row)
#print(listscv)

# divide into healthy and cancerous
healthy = []
cancerous = []
listscv.remove(listscv[0])
#print(listscv)
def listscvCleaner():
    for el in listscv:
        
        #print(el)
        if len(el) == 0:
            #listscv.remove(el)
            continue
        if el[5] == "ACK" or el[5] == "SCC" or el[5] == "MEL":
            cancerous.append(el)
            #print("printer")
            continue
        else:
            healthy.append(el)
            #print("printer2")
            continue
        return 
listscvCleaner()
print(len(healthy), len(cancerous))

def ZaLooper(mylist, mykey): 
#nested loops for extracting key elements
    dalist = []
    for x in mylist:
        dalist.append(x[mykey])
    return dalist

def listcreator():
    
    
    global HealthySorted
    HealthySorted = []
    global CancerousSorted
    CancerousSorted = []
    firstrow = ["id", "color", "symmetry", "compactness",'border', "diagnosis", "smoker", "inheritance"]
    for el in range(len(firstrow)):
        els = ZaLooper(healthy, el)
        HealthySorted.append(els)
      
    
    
        els = ZaLooper(cancerous, el)
        CancerousSorted.append(els)
       

    return HealthySorted, CancerousSorted
print("DEBUG", len(listcreator()[0][0]), len(listcreator()[1][0]))

print(HealthySorted)
#plt.figure(figsize=(8, 4))
d = {}
import plotly.graph_objects as go
import pandas as pd
from plotly.subplots import make_subplots


def convert_lists_to_tuples(data):
    for sublist in data:
        tuple_of_floats = ast.literal_eval(sublist)
        data[data.index(sublist)] = tuple_of_floats

    return data


def plotting(hsv_list1, hsv_list2):

    hsv_list1 = convert_lists_to_tuples(hsv_list1)
    hsv_list2 = convert_lists_to_tuples(hsv_list2)
    
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=[9, 5])

    for j, hsv_color in enumerate(hsv_list1):
        print('Shape of hsv_color:', np.array(hsv_color).shape, "val", hsv_color)
        print('Shape of hsv_list1:', np.array(hsv_list1).shape)
        ax1.add_patch(plt.Rectangle((j, 0), 1, 1, color=mcolors.hsv_to_rgb(hsv_color)))


    # Plot the first list of HSV colors
    for j, hsv_color in enumerate(hsv_list1):
        print(hsv_color, 'printer', j)
        ax1.add_patch(plt.Rectangle((j, 0), 1, 1, color=mcolors.hsv_to_rgb(hsv_color)))

    ax1.set_xlim(0, len(hsv_list1))
    ax1.set_ylim(0, 1)
    ax1.set_title('HSV Color List 1')

    # Plot the second list of HSV colors
    for j, hsv_color in enumerate(hsv_list2):
        ax2.add_patch(plt.Rectangle((j, 0), 1, 1, color=mcolors.hsv_to_rgb(hsv_color)))

    ax2.set_xlim(0, len(hsv_list2))
    ax2.set_ylim(0, 1)
    ax2.set_title('HSV Color List 2')

    plt.show()





    return
if len(HealthySorted[1]) > 0 and len(CancerousSorted[1]) > 0:
    plotting(HealthySorted[1], CancerousSorted[1])
else:
    print("Empty lists. Cannot plot.")
